from flask import Flask, render_template, request, redirect, url_for, session, flash, send_file  # Add flash and send_file
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Migrate
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import requests  # Add this import for Telegram API
from flask_apscheduler import APScheduler  # Add this import for scheduling tasks
from flask_weasyprint import render_pdf  # Add this import for PDF generation
from weasyprint import HTML  # Add this import for PDF generation

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///tax_platform.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

migrate = Migrate(app, db)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—é–¥–∞

app.secret_key = 'your_secret_key'

BOT_TOKEN = '7535906677:AAFr3UtqWhxSNGONTqpTmTv01gAZMVgGXUk'
CHAT_ID = '1131108787'  # Replace with your actual chat ID

def send_telegram_notification(message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": message
    }
    requests.post(url, data=data)

scheduler = APScheduler()
scheduler.init_app(app)
scheduler.start()

def send_daily_reminders():
    today = datetime.now().date()
    taxes = Tax.query.all()

    for tax in taxes:
        try:
            due_date = datetime.strptime(tax.due_date, '%d.%m.%Y').date()
        except ValueError:
            continue

        days_left = (due_date - today).days

        if tax.status == '–ù–µ –æ–ø–ª–∞—á–µ–Ω' and 0 <= days_left <= 7:
            send_telegram_notification(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ \"{tax.type}\" –∏—Å—Ç–µ–∫–∞–µ—Ç {tax.due_date}.")
        elif tax.status == '–ù–µ –æ–ø–ª–∞—á–µ–Ω' and days_left < 0:
            send_telegram_notification(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞–ª–æ–≥: \"{tax.type}\". –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –±—ã–ª {tax.due_date}.")

def send_benefit_notifications():
    requests = BenefitRequest.query.filter(BenefitRequest.status.in_(['–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'])).all()

    for request in requests:
        user = User.query.get(request.user_id)
        if request.status == '–ü—Ä–∏–Ω—è—Ç–æ':
            send_telegram_notification(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ª—å–≥–æ—Ç—É \"{request.description}\" –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        elif request.status == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
            send_telegram_notification(f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ª—å–≥–æ—Ç—É \"{request.description}\" –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# Schedule tasks
scheduler.add_job(id='daily_reminders', func=send_daily_reminders, trigger='cron', hour=9)  # Every day at 9:00 AM
scheduler.add_job(id='benefit_notifications', func=send_benefit_notifications, trigger='interval', minutes=30)  # Every 30 minutes

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(20), nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class BenefitRequest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    description = db.Column(db.Text, nullable=False)
    status = db.Column(db.String(20), default='–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏')

class Tax(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String(100), nullable=False)
    rate = db.Column(db.Float, nullable=False)  # –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ Float
    due_date = db.Column(db.String(20), nullable=False)  # –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã
    status = db.Column(db.String(20), default='–ù–µ –æ–ø–ª–∞—á–µ–Ω')  # –°—Ç–∞—Ç—É—Å –Ω–∞–ª–æ–≥–∞
    base_income = db.Column(db.Float, default=100000)  # –î–æ—Ö–æ–¥ –Ω–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 000 ‚Ç∏)

    def calculate_tax(self):
        return round((self.rate / 100) * self.base_income, 2)  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞–ª–æ–≥–∞

@app.before_request
def initialize_database():
    if not hasattr(app, 'db_initialized'):
        db.create_all()  # –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—è—Ö
        app.db_initialized = True

@app.context_processor
def inject_user_role():
    role = session.get('role', None)
    return {'user_role': role}

@app.route('/logout')
def logout():
    session.clear()  # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    return redirect(url_for('index'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

@app.route('/')                     
def index():
    return render_template('index.html')            

@app.route('/home')
def home():
    if 'user_id' not in session:
        return redirect(url_for('index'))
    
    # Render the home page for all logged-in users
    return render_template('home.html')

@app.route('/taxpayer')
def taxpayer():
    if session.get('role') != 'taxpayer':
        return redirect(url_for('index'))
    return render_template('taxpayer.html')

@app.route('/employee')
def employee():
    if session.get('role') != 'employee':
        return redirect(url_for('index'))
    return render_template('employee.html')

# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –Ω–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤
@app.route('/taxpayer/taxes', methods=['GET', 'POST'])
def taxpayer_taxes():
    if session.get('role') != 'taxpayer':
        return redirect(url_for('index'))
    taxes = Tax.query.all()
    for tax in taxes:
        tax.amount = tax.calculate_tax()  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞–ª–æ–≥–∞
    if request.method == 'POST':
        tax_id = request.form['tax_id']
        tax = Tax.query.get(tax_id)
        tax.status = '–û–ø–ª–∞—á–µ–Ω'
        db.session.commit()
    return render_template('taxes.html', taxes=taxes)

@app.route('/taxpayer/notifications')
def taxpayer_notifications():
    if session.get('role') != 'taxpayer':
        return redirect(url_for('index'))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications = []
    taxes = Tax.query.all()
    for tax in taxes:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
            due_date = datetime.strptime(tax.due_date, '%d.%m.%Y').date()
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è –Ω–∞–ª–æ–≥–∞ {tax.type}: {e}")
            continue

        days_left = (due_date - today).days

        if tax.status == '–ù–µ –æ–ø–ª–∞—á–µ–Ω' and days_left < 0:
            notifications.append({"message": f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞–ª–æ–≥: {tax.type}. –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –±—ã–ª {tax.due_date}."})
        elif tax.status == '–ù–µ –æ–ø–ª–∞—á–µ–Ω' and 0 <= days_left <= 7:
            notifications.append({"message": f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ {tax.type} –∏—Å—Ç–µ–∫–∞–µ—Ç {tax.due_date}."})
        elif tax.status == '–û–ø–ª–∞—á–µ–Ω':
            notifications.append({"message": f"–ù–∞–ª–æ–≥ \"{tax.type}\" —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω."})

    # Debugging: Log notifications to ensure they are generated
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications}")
    return render_template('notifications.html', notifications=notifications)

@app.route('/taxpayer/payment_history')
def taxpayer_payment_history():
    if session.get('role') != 'taxpayer':
        return redirect(url_for('index'))
    
    # Fetch payment history dynamically from the database
    history = Tax.query.filter_by(status='–û–ø–ª–∞—á–µ–Ω').all()
    payment_history = [
        {
            "date": tax.due_date,
            "type": tax.type,
            "amount": f"{tax.calculate_tax():,.2f}‚Ç∏".replace(",", " ")
        }
        for tax in history
    ]
    
    return render_template('payment_history.html', history=payment_history)

@app.route('/taxpayer/benefit_requests', methods=['GET', 'POST'])
def taxpayer_benefit_requests():
    if session.get('role') != 'taxpayer':
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        description = request.form.get('description')  # Get the description from the form
        if not description:
            return "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", 400  # Handle empty description
        
        # Create a new benefit request
        new_request = BenefitRequest(user_id=session['user_id'], description=description)
        db.session.add(new_request)
        db.session.commit()
    
    # Fetch all benefit requests for the logged-in user
    requests = BenefitRequest.query.filter_by(user_id=session['user_id']).all()
    return render_template('benefit_requests.html', requests=requests)

# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@app.route('/employee/manage_taxes', methods=['GET', 'POST'])
def employee_manage_taxes():
    if session.get('role') != 'employee':
        return redirect(url_for('index'))
    if request.method == 'POST':
        tax_type = request.form['type']
        tax_rate = float(request.form['rate'])  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —á–∏—Å–ª–æ
        due_date = request.form['due_date']
        new_tax = Tax(type=tax_type, rate=tax_rate, due_date=due_date)
        db.session.add(new_tax)
        db.session.commit()

        # Send Telegram notification
        send_telegram_notification(f"üì¢ –ù–æ–≤—ã–π –Ω–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω: {tax_type} —Å–æ —Å—Ç–∞–≤–∫–æ–π {tax_rate}% –∏ —Å—Ä–æ–∫–æ–º –æ–ø–ª–∞—Ç—ã {due_date}.")

    taxes = Tax.query.all()
    return render_template('manage_taxes.html', taxes=taxes)

@app.route('/employee/process_benefits', methods=['GET', 'POST'])
def employee_process_benefits():
    if session.get('role') != 'employee':
        return redirect(url_for('index'))
    if request.method == 'POST':
        request_id = request.form['request_id']
        action = request.form['action']
        benefit_request = BenefitRequest.query.get(request_id)
        benefit_request.status = '–ü—Ä–∏–Ω—è—Ç–æ' if action == 'accept' else '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        db.session.commit()
    requests = BenefitRequest.query.all()
    return render_template('process_benefits.html', benefits=requests)

@app.route('/employee/reports', methods=['GET'])
def employee_reports():
    if session.get('role') != 'employee':
        return redirect(url_for('index'))

    # –ü–æ–¥—Å—á—ë—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤
    taxes_paid = db.session.query(Tax).filter_by(status='–û–ø–ª–∞—á–µ–Ω').all()
    total_taxes_collected = sum(tax.calculate_tax() for tax in taxes_paid)

    # –ü–æ–¥—Å—á—ë—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –Ω–∞–ª–æ–≥–æ–≤
    taxes_pending = db.session.query(Tax).filter_by(status='–ù–µ –æ–ø–ª–∞—á–µ–Ω').all()
    pending_taxes = sum(tax.calculate_tax() for tax in taxes_pending)

    # –ü–æ–¥—Å—á—ë—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ª—å–≥–æ—Ç—ã
    benefit_requests = db.session.query(BenefitRequest).count()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = {
        "total_taxes_collected": f"{total_taxes_collected:,.2f}‚Ç∏".replace(",", " "),
        "pending_taxes": f"{pending_taxes:,.2f}‚Ç∏".replace(",", " "),
        "benefit_requests": benefit_requests,
    }

    return render_template('reports.html', report=report)

@app.route('/employee/reports/download', methods=['GET'])
def download_report():
    if session.get('role') != 'employee':
        return redirect(url_for('index'))

    # Fetch data from the database
    taxes_paid = db.session.query(Tax).filter_by(status='–û–ø–ª–∞—á–µ–Ω').all()
    total_taxes_collected = sum(tax.calculate_tax() for tax in taxes_paid)

    taxes_pending = db.session.query(Tax).filter_by(status='–ù–µ –æ–ø–ª–∞—á–µ–Ω').all()
    pending_taxes = sum(tax.calculate_tax() for tax in taxes_pending)

    benefit_requests = db.session.query(BenefitRequest).count()

    # Prepare the report data
    report = {
        "total_taxes_collected": f"{total_taxes_collected:,.2f}‚Ç∏".replace(",", " "),
        "pending_taxes": f"{pending_taxes:,.2f}‚Ç∏".replace(",", " "),
        "benefit_requests": benefit_requests,
    }

    # Render the PDF template
    html = render_template('report_pdf.html', report=report)

    # Return the PDF
    return render_pdf(HTML(string=html), download_filename="report.pdf")

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        role = request.form['role']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.", "error")
            return redirect(url_for('register'))

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(username=username, role=role)
        user.set_password(password)
        db.session.add(user)
        db.session.commit()

        flash("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.", "success")
        return redirect(url_for('login'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            session['user_id'] = user.id
            session['role'] = user.role
            flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!', 'success')
            return redirect(url_for('home'))  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

        flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'error')
        return redirect(url_for('login'))
    return render_template('index.html')

if __name__ == '__main__':
    from os import environ
    port = int(environ.get('PORT', 5000))  # Use the PORT environment variable or default to 5000
    app.run(host='0.0.0.0', port=port)